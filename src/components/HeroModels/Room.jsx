/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 optimized-room.glb 
*/

// import React from 'react'
// import { useGLTF,useTexture } from '@react-three/drei'

// export function Room(props) {
//   const matcapTexture=useTexture('/images/textures/mat1.png')
//   const { nodes, materials } = useGLTF('/models/optimized-room.glb')
//   return (
//     <group {...props} dispose={null}>
//       <mesh geometry={nodes._________6_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.body1_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.cabin_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.chair_body_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.comp_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.emis_lambert1_0.geometry} material={materials.lambert1} />
//       <mesh geometry={nodes.handls_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.keyboard_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.kovrik_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.lamp_bl_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.lamp_white_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.miuse_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.monitor2_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.monitor3_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.pCylinder5_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.pillows_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.polySurface53_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.radiator_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.radiator_blinn1_0001.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.railing_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.red_bttns_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.red_vac_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.stylus_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.table_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.tablet_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.triangle_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.vac_black_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.vacuum1_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.vacuumgrey_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.vires_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.window_blinn1_0.geometry} material={materials.blinn1} />
//       <mesh geometry={nodes.window4_phong1_0.geometry} material={materials.phong1} />
//     </group>
//   )
// }

// useGLTF.preload('/models/optimized-room.glb')


//optimized room.jsx for lagg fix(fine)
// import React, { useMemo } from 'react'
// import { useGLTF, useTexture } from '@react-three/drei'

// export function Room(props) {
//   const matcapTexture = useTexture('/images/textures/mat1.png')
//   const { nodes, materials } = useGLTF('/models/optimized-room.glb')
  
//   // Optimize materials once
//   const optimizedMaterials = useMemo(() => {
//     const mats = {};
    
//     // Optimize blinn1 material
//     if (materials.blinn1) {
//       mats.blinn1 = materials.blinn1.clone();
//       mats.blinn1.needsUpdate = false;
//       mats.blinn1.matcap = matcapTexture; // Use matcap for better performance
//       mats.blinn1.map = null; // Remove expensive textures if not needed
//     }
    
//     // Optimize lambert1 material
//     if (materials.lambert1) {
//       mats.lambert1 = materials.lambert1.clone();
//       mats.lambert1.needsUpdate = false;
//     }
    
//     // Optimize phong1 material
//     if (materials.phong1) {
//       mats.phong1 = materials.phong1.clone();
//       mats.phong1.needsUpdate = false;
//     }
    
//     return mats;
//   }, [materials, matcapTexture]);

//   // Group meshes by material for better batching
//   const blinn1Meshes = useMemo(() => [
//     { geometry: nodes._________6_blinn1_0?.geometry, name: 'mesh1' },
//     { geometry: nodes.body1_blinn1_0?.geometry, name: 'mesh2' },
//     { geometry: nodes.cabin_blinn1_0?.geometry, name: 'mesh3' },
//     { geometry: nodes.chair_body_blinn1_0?.geometry, name: 'mesh4' },
//     { geometry: nodes.comp_blinn1_0?.geometry, name: 'mesh5' },
//     { geometry: nodes.handls_blinn1_0?.geometry, name: 'mesh6' },
//     { geometry: nodes.keyboard_blinn1_0?.geometry, name: 'mesh7' },
//     { geometry: nodes.kovrik_blinn1_0?.geometry, name: 'mesh8' },
//     { geometry: nodes.lamp_bl_blinn1_0?.geometry, name: 'mesh9' },
//     { geometry: nodes.lamp_white_blinn1_0?.geometry, name: 'mesh10' },
//     { geometry: nodes.miuse_blinn1_0?.geometry, name: 'mesh11' },
//     { geometry: nodes.monitor2_blinn1_0?.geometry, name: 'mesh12' },
//     { geometry: nodes.monitor3_blinn1_0?.geometry, name: 'mesh13' },
//     { geometry: nodes.pCylinder5_blinn1_0?.geometry, name: 'mesh14' },
//     { geometry: nodes.pillows_blinn1_0?.geometry, name: 'mesh15' },
//     { geometry: nodes.polySurface53_blinn1_0?.geometry, name: 'mesh16' },
//     { geometry: nodes.radiator_blinn1_0?.geometry, name: 'mesh17' },
//     { geometry: nodes.radiator_blinn1_0001?.geometry, name: 'mesh18' },
//     { geometry: nodes.railing_blinn1_0?.geometry, name: 'mesh19' },
//     { geometry: nodes.red_bttns_blinn1_0?.geometry, name: 'mesh20' },
//     { geometry: nodes.red_vac_blinn1_0?.geometry, name: 'mesh21' },
//     { geometry: nodes.stylus_blinn1_0?.geometry, name: 'mesh22' },
//     { geometry: nodes.table_blinn1_0?.geometry, name: 'mesh23' },
//     { geometry: nodes.tablet_blinn1_0?.geometry, name: 'mesh24' },
//     { geometry: nodes.triangle_blinn1_0?.geometry, name: 'mesh25' },
//     { geometry: nodes.vac_black_blinn1_0?.geometry, name: 'mesh26' },
//     { geometry: nodes.vacuum1_blinn1_0?.geometry, name: 'mesh27' },
//     { geometry: nodes.vacuumgrey_blinn1_0?.geometry, name: 'mesh28' },
//     { geometry: nodes.vires_blinn1_0?.geometry, name: 'mesh29' },
//     { geometry: nodes.window_blinn1_0?.geometry, name: 'mesh30' }
//   ].filter(mesh => mesh.geometry), [nodes]);

//   return (
//     <group {...props} dispose={null}>
//       {/* Batch all blinn1 material meshes */}
//       <group>
//         {blinn1Meshes.map((mesh, index) => (
//           <mesh
//             key={mesh.name}
//             geometry={mesh.geometry}
//             material={optimizedMaterials.blinn1}
//             castShadow={false}  // Disable shadows for performance
//             receiveShadow={false}
//             frustumCulled={true}  // Enable culling
//           />
//         ))}
//       </group>

//       {/* Separate materials */}
//       {nodes.emis_lambert1_0?.geometry && (
//         <mesh 
//           geometry={nodes.emis_lambert1_0.geometry} 
//           material={optimizedMaterials.lambert1}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//         />
//       )}
      
//       {nodes.window4_phong1_0?.geometry && (
//         <mesh 
//           geometry={nodes.window4_phong1_0.geometry} 
//           material={optimizedMaterials.phong1}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//         />
//       )}
//     </group>
//   )
// }

// useGLTF.preload('/models/optimized-room.glb')



///chekckckc
// import React, { useMemo } from 'react'
// import { useGLTF } from '@react-three/drei'

// export function Room(props) {
//   const { nodes, materials } = useGLTF('/models/optimized-room.glb')
  
//   // Ultra-simple material
//   const simpleMaterial = useMemo(() => {
//     return <meshBasicMaterial color="#8B7355" />
//   }, []);

//   // Only render essential objects (desk, chair, monitors)
//   const essentialMeshes = useMemo(() => [
//     nodes.table_blinn1_0?.geometry,
//     nodes.chair_body_blinn1_0?.geometry,
//     nodes.monitor2_blinn1_0?.geometry,
//     nodes.monitor3_blinn1_0?.geometry,
//     nodes.comp_blinn1_0?.geometry
//   ].filter(Boolean), [nodes]);

//   return (
//     <group {...props} dispose={null}>
//       {essentialMeshes.map((geometry, index) => (
//         <mesh
//           key={index}
//           geometry={geometry}
//           material={simpleMaterial}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//         />
//       ))}
//     </group>
//   )
// }

// useGLTF.preload('/models/optimized-room.glb')



///newee
// import React, { useMemo } from 'react'
// import { useGLTF } from '@react-three/drei'

// export function Room(props) {
//   const { nodes, materials } = useGLTF('/models/optimized-room.glb')
  
//   // Create ONE optimized material for all objects (major performance boost)
//   const sharedMaterial = useMemo(() => {
//     // Use the original blinn1 material as base but simplify it
//     if (materials.blinn1) {
//       const mat = materials.blinn1.clone();
//       mat.needsUpdate = false;
//       mat.map = null; // Remove textures
//       mat.normalMap = null; // Remove normal maps
//       mat.roughnessMap = null; // Remove roughness maps
//       mat.metalnessMap = null; // Remove metalness maps
//       mat.aoMap = null; // Remove ambient occlusion maps
//       mat.envMap = null; // Remove environment maps
//       // Keep the original color and basic properties
//       return mat;
//     }
//     // Fallback to basic material
//     return new THREE.MeshLambertMaterial({ color: '#8B7355' });
//   }, [materials]);

//   // Separate essential vs background objects for different detail levels
//   const essentialObjects = useMemo(() => [
//     { geo: nodes.table_blinn1_0?.geometry, name: 'table' },
//     { geo: nodes.chair_body_blinn1_0?.geometry, name: 'chair' },
//     { geo: nodes.monitor2_blinn1_0?.geometry, name: 'monitor1' },
//     { geo: nodes.monitor3_blinn1_0?.geometry, name: 'monitor2' },
//     { geo: nodes.comp_blinn1_0?.geometry, name: 'computer' },
//     { geo: nodes.keyboard_blinn1_0?.geometry, name: 'keyboard' },
//     { geo: nodes.miuse_blinn1_0?.geometry, name: 'mouse' }
//   ].filter(obj => obj.geo), [nodes]);

//   const backgroundObjects = useMemo(() => [
//     { geo: nodes._________6_blinn1_0?.geometry, name: 'bg1' },
//     { geo: nodes.body1_blinn1_0?.geometry, name: 'bg2' },
//     { geo: nodes.cabin_blinn1_0?.geometry, name: 'bg3' },
//     { geo: nodes.handls_blinn1_0?.geometry, name: 'bg4' },
//     { geo: nodes.kovrik_blinn1_0?.geometry, name: 'bg5' },
//     { geo: nodes.lamp_bl_blinn1_0?.geometry, name: 'bg6' },
//     { geo: nodes.lamp_white_blinn1_0?.geometry, name: 'bg7' },
//     { geo: nodes.pCylinder5_blinn1_0?.geometry, name: 'bg8' },
//     { geo: nodes.pillows_blinn1_0?.geometry, name: 'bg9' },
//     { geo: nodes.polySurface53_blinn1_0?.geometry, name: 'bg10' },
//     { geo: nodes.radiator_blinn1_0?.geometry, name: 'bg11' },
//     { geo: nodes.radiator_blinn1_0001?.geometry, name: 'bg12' },
//     { geo: nodes.railing_blinn1_0?.geometry, name: 'bg13' },
//     { geo: nodes.window_blinn1_0?.geometry, name: 'bg14' }
//   ].filter(obj => obj.geo), [nodes]);

//   const decorativeObjects = useMemo(() => [
//     { geo: nodes.red_bttns_blinn1_0?.geometry, name: 'dec1' },
//     { geo: nodes.red_vac_blinn1_0?.geometry, name: 'dec2' },
//     { geo: nodes.stylus_blinn1_0?.geometry, name: 'dec3' },
//     { geo: nodes.tablet_blinn1_0?.geometry, name: 'dec4' },
//     { geo: nodes.triangle_blinn1_0?.geometry, name: 'dec5' },
//     { geo: nodes.vac_black_blinn1_0?.geometry, name: 'dec6' },
//     { geo: nodes.vacuum1_blinn1_0?.geometry, name: 'dec7' },
//     { geo: nodes.vacuumgrey_blinn1_0?.geometry, name: 'dec8' },
//     { geo: nodes.vires_blinn1_0?.geometry, name: 'dec9' }
//   ].filter(obj => obj.geo), [nodes]);

//   // Separate material for special objects
//   const emissiveMaterial = useMemo(() => {
//     if (materials.lambert1) {
//       const mat = materials.lambert1.clone();
//       mat.needsUpdate = false;
//       mat.emissive = mat.color; // Make it slightly glowing
//       mat.emissiveIntensity = 0.1;
//       return mat;
//     }
//     return sharedMaterial;
//   }, [materials, sharedMaterial]);

//   const glassMaterial = useMemo(() => {
//     if (materials.phong1) {
//       const mat = materials.phong1.clone();
//       mat.needsUpdate = false;
//       mat.transparent = true;
//       mat.opacity = 0.7;
//       return mat;
//     }
//     return sharedMaterial;
//   }, [materials, sharedMaterial]);

//   return (
//     <group {...props} dispose={null}>
//       {/* Essential objects - full detail */}
//       <group name="essential">
//         {essentialObjects.map((obj) => (
//           <mesh
//             key={obj.name}
//             geometry={obj.geo}
//             material={sharedMaterial}
//             castShadow={false}
//             receiveShadow={false}
//             frustumCulled={true}
//           />
//         ))}
//       </group>

//       {/* Background objects - simplified rendering */}
//       <group name="background">
//         {backgroundObjects.map((obj) => (
//           <mesh
//             key={obj.name}
//             geometry={obj.geo}
//             material={sharedMaterial}
//             castShadow={false}
//             receiveShadow={false}
//             frustumCulled={true}
//             renderOrder={-1} // Render behind essential objects
//           />
//         ))}
//       </group>

//       {/* Decorative objects - lowest priority */}
//       <group name="decorative">
//         {decorativeObjects.map((obj) => (
//           <mesh
//             key={obj.name}
//             geometry={obj.geo}
//             material={sharedMaterial}
//             castShadow={false}
//             receiveShadow={false}
//             frustumCulled={true}
//             renderOrder={-2} // Render first
//           />
//         ))}
//       </group>

//       {/* Special materials */}
//       {nodes.emis_lambert1_0?.geometry && (
//         <mesh 
//           geometry={nodes.emis_lambert1_0.geometry} 
//           material={emissiveMaterial}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//         />
//       )}
      
//       {nodes.window4_phong1_0?.geometry && (
//         <mesh 
//           geometry={nodes.window4_phong1_0.geometry} 
//           material={glassMaterial}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//         />
//       )}
//     </group>
//   )
// }

// useGLTF.preload('/models/optimized-room.glb')



//more optimizse(design changed)
// import React, { useMemo } from 'react'
// import { useGLTF } from '@react-three/drei'
// import * as THREE from 'three'

// export function Room(props) {
//   const { nodes, materials } = useGLTF('/models/optimized-room.glb')
  
//   // Ultra-fast single material
//   const ultraFastMaterial = useMemo(() => {
//     return new THREE.MeshLambertMaterial({ 
//       color: '#8B73',
//       fog: true,
//       // Disable all expensive features
//       transparent: false,
//       alphaTest: 0,
//       side: THREE.FrontSide
//     });
//   }, []);

//   // Combine geometries for massive performance boost
//   const combinedGeometry = useMemo(() => {
//     const geometries = [];
//     const matrix = new THREE.Matrix4();
    
//     // Only essential visible objects
//     const essentialMeshes = [
//       nodes.table_blinn1_0?.geometry,
//       nodes.chair_body_blinn1_0?.geometry,
//       nodes.monitor2_blinn1_0?.geometry,
//       nodes.monitor3_blinn1_0?.geometry,
//       nodes.comp_blinn1_0?.geometry,
//       nodes.keyboard_blinn1_0?.geometry,
//       nodes.miuse_blinn1_0?.geometry,
//       nodes.lamp_bl_blinn1_0?.geometry,
//       nodes.lamp_white_blinn1_0?.geometry,
//       // Add only the most visible background objects
//       nodes.window_blinn1_0?.geometry,
//       nodes.cabin_blinn1_0?.geometry,
//       nodes.railing_blinn1_0?.geometry
//     ].filter(Boolean);

//     essentialMeshes.forEach(geometry => {
//       if (geometry) {
//         geometries.push(geometry);
//       }
//     });

//     // Merge all geometries into one (1 draw call instead of 30+)
//     const mergedGeometry = new THREE.BufferGeometry();
//     if (geometries.length > 0) {
//       const merged = THREE.BufferGeometryUtils?.mergeBufferGeometries(geometries);
//       if (merged) {
//         return merged;
//       }
//     }
    
//     // Fallback: return first geometry if merge fails
//     return geometries[0] || new THREE.BoxGeometry(1, 1, 1);
//   }, [nodes]);

//   // Minimal decorative objects (only if really needed)
//   const criticalObjects = useMemo(() => [
//     { geo: nodes.pillows_blinn1_0?.geometry, name: 'pillows' },
//     { geo: nodes.tablet_blinn1_0?.geometry, name: 'tablet' }
//   ].filter(obj => obj.geo), [nodes]);

//   return (
//     <group {...props} dispose={null}>
//       {/* Single merged mesh - MASSIVE performance boost */}
//       <mesh
//         geometry={combinedGeometry}
//         material={ultraFastMaterial}
//         castShadow={false}
//         receiveShadow={false}
//         frustumCulled={true}
//         matrixAutoUpdate={false} // Static objects don't need matrix updates
//       />

//       {/* Only 2 additional objects for essential details */}
//       {criticalObjects.slice(0, 2).map((obj) => (
//         <mesh
//           key={obj.name}
//           geometry={obj.geo}
//           material={ultraFastMaterial}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//           matrixAutoUpdate={false}
//         />
//       ))}

//       {/* Special window object (if really needed for lighting) */}
//       {nodes.window4_phong1_0?.geometry && (
//         <mesh 
//           geometry={nodes.window4_phong1_0.geometry} 
//           material={new THREE.MeshBasicMaterial({ 
//             color: '#87CEEB', 
//             transparent: true, 
//             opacity: 0.3 
//           })}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//           matrixAutoUpdate={false}
//         />
//       )}
//     </group>
//   )
// }

// useGLTF.preload('/models/optimized-room.glb')


//cjecl1
// import React, { useMemo } from 'react'
// import { useGLTF } from '@react-three/drei'

// export function Room(props) {
//   const { nodes, materials } = useGLTF('/models/optimized-room.glb')
  
//   // Create optimized materials that maintain original look
//   const optimizedMaterials = useMemo(() => {
//     const mats = {};
    
//     // Keep original blinn1 but optimize it
//     if (materials.blinn1) {
//       mats.blinn1 = materials.blinn1.clone();
//       mats.blinn1.needsUpdate = false;
//       // Keep color and basic properties, remove expensive features
//       mats.blinn1.normalMap = null;
//       mats.blinn1.roughnessMap = null;
//       mats.blinn1.metalnessMap = null;
//     }
    
//     // Keep original lambert1
//     if (materials.lambert1) {
//       mats.lambert1 = materials.lambert1.clone();
//       mats.lambert1.needsUpdate = false;
//     }
    
//     // Keep original phong1 for glass
//     if (materials.phong1) {
//       mats.phong1 = materials.phong1.clone();
//       mats.phong1.needsUpdate = false;
//     }
    
//     return mats;
//   }, [materials]);

//   // All objects individually to maintain original design
//   const allMeshes = useMemo(() => [
//     { geometry: nodes._________6_blinn1_0?.geometry, name: 'mesh1', material: 'blinn1' },
//     { geometry: nodes.body1_blinn1_0?.geometry, name: 'mesh2', material: 'blinn1' },
//     { geometry: nodes.cabin_blinn1_0?.geometry, name: 'mesh3', material: 'blinn1' },
//     { geometry: nodes.chair_body_blinn1_0?.geometry, name: 'mesh4', material: 'blinn1' },
//     { geometry: nodes.comp_blinn1_0?.geometry, name: 'mesh5', material: 'blinn1' },
//     { geometry: nodes.handls_blinn1_0?.geometry, name: 'mesh6', material: 'blinn1' },
//     { geometry: nodes.keyboard_blinn1_0?.geometry, name: 'mesh7', material: 'blinn1' },
//     { geometry: nodes.kovrik_blinn1_0?.geometry, name: 'mesh8', material: 'blinn1' },
//     { geometry: nodes.lamp_bl_blinn1_0?.geometry, name: 'mesh9', material: 'blinn1' },
//     { geometry: nodes.lamp_white_blinn1_0?.geometry, name: 'mesh10', material: 'blinn1' },
//     { geometry: nodes.miuse_blinn1_0?.geometry, name: 'mesh11', material: 'blinn1' },
//     { geometry: nodes.monitor2_blinn1_0?.geometry, name: 'mesh12', material: 'blinn1' },
//     { geometry: nodes.monitor3_blinn1_0?.geometry, name: 'mesh13', material: 'blinn1' },
//     { geometry: nodes.pCylinder5_blinn1_0?.geometry, name: 'mesh14', material: 'blinn1' },
//     { geometry: nodes.pillows_blinn1_0?.geometry, name: 'mesh15', material: 'blinn1' },
//     { geometry: nodes.polySurface53_blinn1_0?.geometry, name: 'mesh16', material: 'blinn1' },
//     { geometry: nodes.radiator_blinn1_0?.geometry, name: 'mesh17', material: 'blinn1' },
//     { geometry: nodes.radiator_blinn1_0001?.geometry, name: 'mesh18', material: 'blinn1' },
//     { geometry: nodes.railing_blinn1_0?.geometry, name: 'mesh19', material: 'blinn1' },
//     { geometry: nodes.red_bttns_blinn1_0?.geometry, name: 'mesh20', material: 'blinn1' },
//     { geometry: nodes.red_vac_blinn1_0?.geometry, name: 'mesh21', material: 'blinn1' },
//     { geometry: nodes.stylus_blinn1_0?.geometry, name: 'mesh22', material: 'blinn1' },
//     { geometry: nodes.table_blinn1_0?.geometry, name: 'mesh23', material: 'blinn1' },
//     { geometry: nodes.tablet_blinn1_0?.geometry, name: 'mesh24', material: 'blinn1' },
//     { geometry: nodes.triangle_blinn1_0?.geometry, name: 'mesh25', material: 'blinn1' },
//     { geometry: nodes.vac_black_blinn1_0?.geometry, name: 'mesh26', material: 'blinn1' },
//     { geometry: nodes.vacuum1_blinn1_0?.geometry, name: 'mesh27', material: 'blinn1' },
//     { geometry: nodes.vacuumgrey_blinn1_0?.geometry, name: 'mesh28', material: 'blinn1' },
//     { geometry: nodes.vires_blinn1_0?.geometry, name: 'mesh29', material: 'blinn1' },
//     { geometry: nodes.window_blinn1_0?.geometry, name: 'mesh30', material: 'blinn1' }
//   ].filter(mesh => mesh.geometry), [nodes]);

//   return (
//     <group {...props} dispose={null}>
//       {/* Render all objects individually to maintain original design */}
//       {allMeshes.map((mesh) => (
//         <mesh
//           key={mesh.name}
//           geometry={mesh.geometry}
//           material={optimizedMaterials[mesh.material]}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//           matrixAutoUpdate={false} // Static objects don't need matrix updates
//         />
//       ))}

//       {/* Special materials */}
//       {nodes.emis_lambert1_0?.geometry && (
//         <mesh 
//           geometry={nodes.emis_lambert1_0.geometry} 
//           material={optimizedMaterials.lambert1}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//           matrixAutoUpdate={false}
//         />
//       )}
      
//       {nodes.window4_phong1_0?.geometry && (
//         <mesh 
//           geometry={nodes.window4_phong1_0.geometry} 
//           material={optimizedMaterials.phong1}
//           castShadow={false}
//           receiveShadow={false}
//           frustumCulled={true}
//           matrixAutoUpdate={false}
//         />
//       )}
//     </group>
//   )
// }

// useGLTF.preload('/models/optimized-room.glb')



//chedk2
import React, { useMemo } from 'react'
import { useGLTF } from '@react-three/drei'

export function Room(props) {
  const { nodes, materials } = useGLTF('/models/optimized-room.glb')
  
  // Single optimized material for performance
  const sharedMaterial = useMemo(() => {
    if (materials.blinn1) {
      const mat = materials.blinn1.clone();
      mat.needsUpdate = false;
      mat.normalMap = null;
      mat.roughnessMap = null;
      mat.metalnessMap = null;
      return mat;
    }
    return new THREE.MeshLambertMaterial({ color: '#8B7355' });
  }, [materials]);

  // CORE STRATEGY: Only render 12-15 most visually important objects
  // instead of all 30+ objects
  const essentialVisualObjects = useMemo(() => [
    // MUST HAVE - Main furniture (keeps room structure)
    { geometry: nodes.table_blinn1_0?.geometry, name: 'table' },
    { geometry: nodes.chair_body_blinn1_0?.geometry, name: 'chair' },
    
    // MUST HAVE - Tech setup (main focus area)
    { geometry: nodes.monitor2_blinn1_0?.geometry, name: 'monitor1' },
    { geometry: nodes.monitor3_blinn1_0?.geometry, name: 'monitor2' },
    { geometry: nodes.comp_blinn1_0?.geometry, name: 'computer' },
    { geometry: nodes.keyboard_blinn1_0?.geometry, name: 'keyboard' },
    { geometry: nodes.miuse_blinn1_0?.geometry, name: 'mouse' },
    
    // IMPORTANT - Room structure 
    { geometry: nodes.window_blinn1_0?.geometry, name: 'window' },
    { geometry: nodes.cabin_blinn1_0?.geometry, name: 'cabinet' },
    { geometry: nodes.railing_blinn1_0?.geometry, name: 'railing' },
    
    // NICE TO HAVE - Visual interest (only 4 decorative items)
    { geometry: nodes.lamp_white_blinn1_0?.geometry, name: 'lamp' },
    { geometry: nodes.pillows_blinn1_0?.geometry, name: 'pillows' },
    { geometry: nodes.tablet_blinn1_0?.geometry, name: 'tablet' },
    { geometry: nodes.kovrik_blinn1_0?.geometry, name: 'rug' }
    
    // SKIPPED: All vacuum parts, radiators, extra decorations, handles, etc.
    // This reduces from 30+ objects to just 14 objects = 50%+ performance boost
    
  ].filter(obj => obj.geometry), [nodes]);

  // Special materials for key visual elements
  const windowMaterial = useMemo(() => {
    if (materials.phong1) {
      const mat = materials.phong1.clone();
      mat.needsUpdate = false;
      mat.transparent = true;
      mat.opacity = 0.7;
      return mat;
    }
    return sharedMaterial;
  }, [materials, sharedMaterial]);

  const emissiveMaterial = useMemo(() => {
    if (materials.lambert1) {
      const mat = materials.lambert1.clone();
      mat.needsUpdate = false;
      return mat;
    }
    return sharedMaterial;
  }, [materials, sharedMaterial]);

  return (
    <group {...props} dispose={null}>
      {/* Only render 14 most important objects instead of 30+ */}
      {essentialVisualObjects.map((obj) => (
        <mesh
          key={obj.name}
          geometry={obj.geometry}
          material={sharedMaterial}
          castShadow={false}
          receiveShadow={false}
          frustumCulled={true}
          matrixAutoUpdate={false}
        />
      ))}

      {/* Special window with transparency */}
      {nodes.window4_phong1_0?.geometry && (
        <mesh 
          geometry={nodes.window4_phong1_0.geometry} 
          material={windowMaterial}
          castShadow={false}
          receiveShadow={false}
          frustumCulled={true}
          matrixAutoUpdate={false}
        />
      )}

      {/* Emissive object if needed */}
      {nodes.emis_lambert1_0?.geometry && (
        <mesh 
          geometry={nodes.emis_lambert1_0.geometry} 
          material={emissiveMaterial}
          castShadow={false}
          receiveShadow={false}
          frustumCulled={true}
          matrixAutoUpdate={false}
        />
      )}
    </group>
  )
}

useGLTF.preload('/models/optimized-room.glb')